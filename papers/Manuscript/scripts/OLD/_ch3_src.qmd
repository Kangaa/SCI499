---
title: "Code & Data"
---
# Package dependencies
```{r packages}
library(tidyverse)
library(sf)
library(glue)
```

# function definitions
```{r plotmixmat}
plotmixmat <- function(mixmat){
  mixmat %>% 
    as_tibble(rownames = "i") %>% 
    pivot_longer(-1, names_to = "j", values_to = "mixing") %>% 
    ggplot() +
    aes(x = j, y = i, fill = log(mixing)) +
    geom_tile(show.legend = FALSE) + 
    theme(axis.text = element_blank(),
          axis.ticks = element_blank())+
    scale_fill_continuous(type = "viridis")}
```

```{r SAmixmat}
SAmixmat <- function(data){
  
  levels <- data %>%
    names() %>%
    subset(grepl("SA._CODE|GCC_CODE21", .))
  
  xi <- rep(1/length(levels), length(levels))
  
  npatch = nrow(data)
  
  level_vec = vector("character", npatch)
  
  mixmat = matrix(0, npatch, npatch,
                  dimnames = list(data[[levels[1]]],
                                  data[[levels[1]]]))
  
  for (i in 1:npatch){
    patch_i <- data[i,]
    norm <- rep(0, length(levels))
    for (j in 1:npatch){
      patch_j <- data[j,]
      for (l in seq_along(levels)){ #find lowest level of association
        code_l <-  levels[l]
        if (patch_i[[code_l]] == patch_j[[code_l]]){
          level_vec[j] <- levels[l] #place LLA in level_vec(i)
          norm[l:length(norm)] <- norm[l:length(norm)] + 1 #add +1 to the count of patches in the same level L as i
          break
        }
      }
    }
    for (l in seq_along(levels)){
      for (j in 1:npatch){
        if (level_vec[j] %in% levels[1:l]){
          mixmat[i,j] <- mixmat[i,j] + (xi[l]/norm[l])

        }
      }
    }
  }
  mixmat
}

```

```{r SAPmixmat}

test <- function(GMelb_Popns, GMelb_Shapes){
  
  codepops <- GMelb_Shapes %>%
    st_drop_geometry() %>% 
    select(ends_with("_CODE21")) %>% 
    left_join(GMelb_Popns[[1]], join_by(SA2_CODE21 == SA2_Code)) 
  
    
  
  levels <- c(paste0("SA", c("2", "3", "4"), "_CODE21"), "GCC_CODE21")
  xi <- rep(1/length(levels), length(levels))
  
  npatch = nrow(codepops)
  level_vec = vector("character", npatch)
  
  mixmat = matrix(0, npatch, npatch,
                  dimnames = list(codepops[[levels[1]]],
                                  codepops[[levels[1]]]))
  
  popcodes <- list()
  
  for (i in seq_along(levels)){
   popcodes[[levels[i] %>% str_sub(1,3)]] <-  codepops %>% 
      group_by(.data[[levels[i]]]) %>% 
      summarise(pop = sum(Pop))
  }

 for (i in 1:npatch){
    patch_i <- codepops[i,]
    for (j in 1:npatch){
      patch_j <- codepops[j,]
      for (l in seq_along(levels)){ #find lowest level of association
        code_l <-  levels[l]
        if (patch_i[[code_l]] == patch_j[[code_l]]){
          if (l == 1) mixmat[i,j] <- xi[1]
          else{
            ll_pop <-  popcodes[[l]] %>%  filter(.data[[code_l]] == patch_j[[code_l]]) %>% pluck(2)
            
            ul_pop <- (popcodes[[l]] %>%  filter(.data[[code_l]] == patch_i[[code_l]]) %>% pluck(2)) - (popcodes[[l-1]] %>%  filter(.data[[levels[l-1]]] == patch_i[[levels[l-1]]]) %>% pluck(2))
            
            mixmat[i,j] <- xi[l]*(ll_pop/ul_pop)
          }
        }
      }
    }
  }
  mixmat
}
test(GMelb_Popns, GMelb_Shapes)
```


```{r SAPmixmat}
SAmixmat <- function(codes, pops){
  
  levels <- data %>%
    names() %>%
    subset(grepl("SA._CODE|GCC_CODE21", .))
  
  xi <- rep(1/length(levels), length(levels))
  
  npatch = nrow(data)
  level_vec = vector("character", npatch)
  
  mixmat = matrix(0, npatch, npatch,
                  dimnames = list(data[[levels[1]]],
                                  data[[levels[1]]]))
  
  for (i in 1:npatch){
    patch_i <- data[i,]
    norm <- rep(0, length(levels))
    for (j in 1:npatch){
      patch_j <- data[j,]
      for (l in seq_along(levels)){ #find lowest level of association
        code_l <-  levels[l]
        if (patch_i[[code_l]] == patch_j[[code_l]]){
          if (l == 1) mixmat[i,j] <- xi[1]
          else{
            mixmat[i,j] <- xi[l]*(Pops[[1]][j])
          }
        }
      }
    }
  }
  mixmat
}

```

# Data processing
```{r Shapefiles}
#| echo: false
#| warning: false
levels <- list(MB = "MB", SA1 = "SA1", SA2 = "SA2", SA3 = "SA3", SA4 = "SA4")
Shapes <- map(
  map(
    levels,
    \(x) glue("../../data/ASGS_GDA2020/{x}_2021_AUST_SHP_GDA2020/{x}_2021_AUST_GDA2020.shp")),
  read_sf)


GMelb_Shapes <- Shapes |> 
  map(\(x) filter(x, GCC_NAME21 == "Greater Melbourne"))
```

```{r Population}
GMelb_Popns <- map(
  map(
    c("2", "3", "4"),
    \(x) str_replace("../../data/GmelbSA_X_Pop21.csv", "_X_", x)), ~
  read_csv(.x) %>% 
    mutate(across(contains("Code"), as.character))) |> 
  `names<-`(c("SA2", "SA3", "SA4"))
```

```{r Popmixmat}
MMpops <- map(c("SA2", "SA3", "SA4"),
              \(x){
                size <- nrow(GMelb_Popns[[x]])
                
                MMpop <- matrix(NA,
                                size,
                                size,
                                dimnames = list(
                                  GMelb_Popns[[x]][[paste0(x, "_Code")]],
                                  GMelb_Popns[[x]][[paste0(x, "_Code")]]))
                
                Ntot = sum(GMelb_Popns[[x]][[3]])
                
                for (i in seq_along(MMpop[1,])){
                  for (j in seq_along(MMpop[,1])){
                    MMpop[i,j] <- GMelb_Popns[[x]][[3]][j]/Ntot
                  }
                } 
                MMpop
              })
```



