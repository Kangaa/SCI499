---
title: "Code & Data"
---
# Package dependencies
```{r packages}
library(tidyverse)
library(sf)
library(glue)
```



# Chapter 3
```{r}
#| echo: false
#| warning: false
levels <- list(MB = "MB", SA1 = "SA1", SA2 = "SA2", SA3 = "SA3", SA4 = "SA4")
Shapes <- map(
  map(
    levels,
    \(x) glue("../../data/ASGS_GDA2020/{x}_2021_AUST_SHP_GDA2020/{x}_2021_AUST_GDA2020.shp")),
  read_sf)


GMelb_Shapes <- Shapes |> 
  map(\(x) filter(x, GCC_NAME21 == "Greater Melbourne"))
```

```{r}
plotmixmat <- function(mixmat){
  mixmat %>% 
    as_tibble(rownames = "i") %>% 
    pivot_longer(-1, names_to = "j", values_to = "mixing") %>% 
    ggplot() +
    aes(x = j, y = i, fill = log(mixing)) +
    geom_tile(show.legend = FALSE) + 
    theme(axis.text = element_blank(),
          axis.ticks = element_blank())+
    scale_fill_continuous(type = "viridis")}
```

```{r}
GMelb_Popns <- map(
  map(
    c("2", "3", "4"),
    \(x) str_replace("../../data/GmelbSA_X_Pop21.csv", "_X_", x)),
  read_csv) |> 
  `names<-`(c("SA2", "SA3", "SA4"))
```

```{r}
MMpops <- map(c("SA2", "SA3", "SA4"),
              \(x){
                size <- nrow(GMelb_Popns[[x]])
                
                MMpop <- matrix(NA,
                                size,
                                size,
                                dimnames = list(
                                  GMelb_Popns[[x]][[paste0(x, "_Code")]],
                                  GMelb_Popns[[x]][[paste0(x, "_Code")]]))
                
                Ntot = sum(GMelb_Popns[[x]][[3]])
                
                for (i in seq_along(MMpop[1,])){
                  for (j in seq_along(MMpop[,1])){
                    MMpop[i,j] <- GMelb_Popns[[x]][[3]][j]/Ntot
                  }
                } 
                MMpop
              })
```

```{r}
Hmixmat <- function(data){
  
  levels <- data %>%
    names() %>%
    subset(grepl("SA._CODE|GCC_CODE21", .))
  
  xi <- rep(1/length(levels), length(levels))
  
  npatch = nrow(data)
  
  level_vec = vector("character", npatch)
  
  mixmat = matrix(0, npatch, npatch,
                  dimnames = list(data[[levels[1]]],
                                  data[[levels[1]]]))
  
  for (i in 1:npatch){
    patch_i <- data[i,]
    norm <- rep(0, length(levels))
    for (j in 1:npatch){
      patch_j <- data[j,]
      for (l in seq_along(levels)){ #find lowest level of association (LLA)
        code_l <-  levels[l]
        if (patch_i[[code_l]] == patch_j[[code_l]]){
          level_vec[j] <- levels[l] #place LLA in level_vec(i)
          norm[l:length(norm)] <- norm[l:length(norm)] + 1 #add +1 to the count of patches in the same level L as i
          break
        }
      }
    }
    for (l in seq_along(levels)){
      for (j in 1:npatch){
        #if (level_vec[j] %in% levels[1:l]){
        if (level_vec[j] == levels[l]){ 
          #mixmat[i,j] <- mixmat[i,j] + (xi[l]/norm[l])
          if (l == 1) mixmat[i,j] <- xi[l]/norm[l]
          else mixmat[i,j] <- xi[l]/(norm[l] - norm[l-1])
        }
      }
    }
  }
  mixmat
}

```
# Chapter 4
```{r}
sim_dirs <- list.files("../../data/sims/new", recursive = TRUE)

tot_dirs <- sim_dirs[!str_detect(sim_dirs, "patchinf|patchsus|summary")] %>% 
  paste0("../../data/sims/new/", .)

sims <- read_csv(tot_dirs, col_names = c("t", "S", "I"), skip = 1, id = "sim" )

sims <-  sims |>
  filter(t != "Int64", grepl("HPMM", sim)) %>% 
  mutate(
    S = as.numeric(S),
    I = as.numeric(I),
    t = as.numeric(t),
    SA = str_extract(sim, "SA./SA(.)", 1),
    Mixmat = str_extract(sim, "SA./SA._..._..._(HPMM|HMM|OD)_", 1),
    mu = str_extract(sim, "SA./SA._..._..._.{3,4}_(.{0,3})_", 1),
    Intervention = factor(str_extract(sim,"SA./SA._..._..._.{3,4}_.{0,3}_(none|local|travel|total)", 1),levels = c("none", "local", "travel", "total"), ordered = TRUE),
    beta = as.numeric(str_extract(sim, "SA./SA._(...)", group = 1)),
    gamma = as.numeric(str_extract(sim, "SA./SA._..._(...)", group = 1)),
    R0 = beta/gamma,
    sim_num = str_extract(sim, "(_.{1,3}).csv", 1))
```

## Population proportional SA mixing matrix

```{r}
sims %>% 
  filter(R0 == 1.4) %>% 
  ggplot() +
  aes(x = t, y = I) +
  geom_line(aes(col = mu, group = sim_num)) +
  facet_grid(Intervention ~ SA, scales = "free")
```

```{r}
sim_stats <- sims %>% 
  group_by(sim_num, SA, Mixmat,mu,  Intervention, R0) %>% 
  summarise(peaksize = max(I),
            finalsize = max(S) - min(S),
            duration = max(t))
```

## peak size

```{r}
sim_stats %>% 
  filter() %>% 
  ggplot() + 
  aes(x = R0, y = peaksize) +
  geom_point(aes(col = mu)) +
  facet_grid(SA ~ Intervention)
```

## Final Size

```{r}
sim_stats %>% 
  filter(duration < 1000) %>% 
  ggplot() + 
  aes(x = R0, y = finalsize) +
  geom_point(aes(col = mu)
  )+
  facet_grid(SA ~ Intervention)
```

## Duration

### SA3

```{r}
sim_stats %>% 
  filter(duration < 1000, SA == "3") %>% 
  ggplot() + 
  geom_histogram(aes(x = duration, fill = mu))+
  facet_grid(Intervention ~ R0, scales = "free")

```

### SA4

```{r}
sim_stats %>% 
  filter(duration < 1000, SA == "4") %>% 
  ggplot() + 
  geom_histogram(aes(x = duration, fill = mu))+
  facet_grid(Intervention ~ R0, scales = "free")

```


