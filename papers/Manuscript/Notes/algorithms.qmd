---
title: "Quarto Scratch"
filters:
  - pseudocode
format:
  html:
    include-in-header:
      text: |
        <script>
        MathJax = {
          loader: {
            load: ['[tex]/boldsymbol']
          },
          tex: {
            tags: "all",
            inlineMath: [['$','$'], ['\\(','\\)']],
            displayMath: [['$$','$$'], ['\\[','\\]']],
            processEscapes: true,
            processEnvironments: true,
            packages: {
              '[+]': ['boldsymbol']
            }
          }
        };
        </script>
        <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml-full.js" type="text/javascript"></script>
---

## Gillespie algorithm

```pseudocode
#| label: alg-Gillespie
#| html-indent-size: "1.2em"
#| html-comment-delimiter: "//"
#| html-line-number: true
#| html-line-number-punc: ":"
#| html-no-end: false
#| pdf-placement: "htb!"
#| pdf-line-number: true

\begin{algorithm}
\caption{Gillespie Direct Method for SIR Compartmental Model CTMC}

\begin{algorithmic}
\input
\output
\State Initialise time $t = 0$ and state $X = x_0$
  \While{$t < T_{max}$}
      \State set $a_0 = 0$
      \For{reaction $R_j$}
          \State compute $a_j$
          \State update $a_0 = a_0 + a_j$
      \EndFor
      \State generate two random numbers $r_1$, $r_2$ ion $\union (0,1)$
      \State select $R_\mu$ with the smallest index $\mu$ such that $\sum\limits_{j = 1}^{\mu} a_j \leq r_1 a_0$
      \State compute $\tau = \frac{1}{a_0}\ln(1/r_2)$
      \State update $X = X + v_\mu$
      \State set $t = t + \tau$
  \EndWhile
\end{algorithmic}
\end{algorithm}
```
### Metapopulation CTMC

```pseudocode
#| label: alg-Gillespie
#| html-indent-size: "1.2em"
#| html-comment-delimiter: "//"
#| html-line-number: true
#| html-line-number-punc: ":"
#| html-no-end: false
#| pdf-placement: "htb!"
#| pdf-line-number: true

\begin{algorithm}
\caption{Gillespie Direct Method for SIR Compartmental Model CTMC}

\begin{algorithmic}
\input
\output
\State Initialise time $t = 0$ and state $X = x_0$
  \While{$t < T_{max}$}
      \State set $a_0 = 0$
      \For{reaction $R_j$}
          \State compute $a_j$
          \State update $a_0 = a_0 + a_j$
      \EndFor
      \State generate two random numbers $r_1$, $r_2$ ion $\union (0,1)$
      \State select $R_\mu$ with the smallest index $\mu$ such that $\sum\limits_{j = 1}^{\mu} a_j \leq r_1 a_0$
      \State compute $\tau = \frac{1}{a_0}\ln(1/r_2)$
      \State update $X = X + v_\mu$
      \State set $t = t + \tau$
  \EndWhile
\end{algorithmic}
\end{algorithm}
```
