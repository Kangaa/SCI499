/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// surfingKeyIndex.ts
var surfingKeyIndex_exports = {};
__export(surfingKeyIndex_exports, {
  SurfingKeyModal: () => SurfingKeyModal,
  default: () => SurfingKeyPlugin2
});
module.exports = __toCommonJS(surfingKeyIndex_exports);
var import_obsidian2 = require("obsidian");

// surfingKey.ts
var import_obsidian = require("obsidian");
var UniqueStrings = class {
  constructor() {
    this.usedStrings = /* @__PURE__ */ new Set();
    this.twoCharIndex = 0;
    this.threeCharIndex = 0;
    this.threeCharFirstIndex = 0;
    this.characters = "QWERTASDFGZXCVB";
    this.usedChars = /* @__PURE__ */ new Set();
  }
  findUnusedChar() {
    let result = "";
    let usedCharsArray = Array.from(this.usedChars);
    for (let i = 0; i < this.characters.length; i++) {
      if (!usedCharsArray.includes(this.characters.charAt(i))) {
        result = this.characters.charAt(i);
        break;
      }
    }
    return result;
  }
  generateUniqueString() {
    let result = "";
    if (this.usedStrings.size < 210) {
      if (this.twoCharIndex >= this.characters.length * this.characters.length - 15) {
        throw new Error("All possible two character strings have been generated!");
      }
      do {
        let firstChar = this.characters.charAt(Math.floor(this.twoCharIndex / this.characters.length));
        this.usedChars.add(firstChar);
        let secondChar = this.characters.charAt(this.twoCharIndex % this.characters.length);
        result = firstChar + secondChar;
        this.twoCharIndex++;
      } while (this.usedStrings.has(result));
    } else {
      if (this.usedStrings.size >= 210 + 225) {
        throw new Error("All possible strings have been generated!");
      }
      if (this.threeCharFirstIndex >= 225) {
        throw new Error("All possible three character strings have been generated!");
      }
      do {
        let firstChar = this.findUnusedChar();
        let secondChar = this.characters.charAt(Math.floor(this.threeCharIndex / this.characters.length));
        let thirdChar = this.characters.charAt(this.threeCharIndex % this.characters.length);
        result = firstChar + secondChar + thirdChar;
        this.threeCharIndex++;
        if (this.threeCharIndex >= this.characters.length * this.characters.length) {
          this.threeCharIndex = 0;
          this.threeCharFirstIndex++;
        }
      } while (this.usedStrings.has(result));
    }
    this.usedStrings.add(result);
    return result;
  }
};
var ElementMonitor = class {
  constructor(doc, cb, plugin) {
    this.elementsWithUniqueStrings = /* @__PURE__ */ new Map();
    this.keydownHandler = null;
    this.removed = false;
    this.doc = doc;
    this.plugin = plugin;
    this.uniqueStrings = new UniqueStrings();
    this.overlay = this.createOverlay();
    this.cb = cb;
  }
  createOverlay() {
    this.modal = new SurfingKeyModal(app, this.plugin, this);
    this.modal.open();
    this.modal.containerEl.empty();
    const overlay = this.modal.containerEl;
    overlay.addClasses(["surfing-key-overlay"]);
    overlay.createDiv({
      cls: "inputDisplay",
      attr: {
        id: "inputDisplay"
      }
    });
    return overlay;
  }
  isElementInViewport(el) {
    const rect = el.getBoundingClientRect();
    return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
  }
  attachStringsToElements() {
    const rules = [
      (child) => {
        var _a, _b;
        return child instanceof SVGSVGElement && !((_a = child.classList) == null ? void 0 : _a.contains("canvas-background")) && !((_b = child.classList) == null ? void 0 : _b.contains("canvas-edges")) ? true : null;
      },
      (child) => child instanceof HTMLInputElement && child.type === "checkbox" ? true : null,
      (child) => {
        var _a;
        return ((_a = child.classList) == null ? void 0 : _a.contains("canvas-node-label")) ? false : null;
      },
      (child) => {
        var _a;
        return ((_a = child.classList) == null ? void 0 : _a.contains("canvas-node-container")) ? true : null;
      }
    ];
    const processQueue = (queue) => {
      var _a, _b;
      if (!queue.length)
        return;
      const element = queue.shift();
      if (!element) {
        processQueue(queue);
        return;
      }
      const pushChildren = (child) => {
        var _a2;
        if (child instanceof Element) {
          const style = window.getComputedStyle(child);
          if (style.display === "none") {
            return false;
          }
        }
        queue.push(child);
        for (const rule of rules) {
          const result = rule(child);
          if (result !== null) {
            return result;
          }
        }
        return !!(child.nodeType === Node.TEXT_NODE && ((_a2 = child.textContent) == null ? void 0 : _a2.trim()) && child.textContent !== "/");
      };
      const hasSvgOrTextContentChild = (Array.from(element.childNodes).some(pushChildren) || ((_a = element.classList) == null ? void 0 : _a.contains("canvas-color-picker-item")) || element instanceof HTMLInputElement && element.type === "search" || element instanceof HTMLSelectElement) && !((_b = element == null ? void 0 : element.classList) == null ? void 0 : _b.contains("canvas-icon-placeholder"));
      if (hasSvgOrTextContentChild) {
        const style = window.getComputedStyle(element);
        if (style.display !== "none" && this.isElementInViewport(element)) {
          const elementPosition = element.getBoundingClientRect();
          if (elementPosition.top !== 0 || elementPosition.left !== 0) {
            const uniqueString = this.uniqueStrings.generateUniqueString();
            this.elementsWithUniqueStrings.set(uniqueString, element);
            const stringElement = this.overlay.createEl("span", {
              cls: "surfing-key-string",
              attr: {
                id: uniqueString
              }
            });
            stringElement.textContent = uniqueString;
            const midPointX = elementPosition.left + elementPosition.width / 2;
            const midPointY = elementPosition.top + elementPosition.height / 2;
            const stringElementRect = stringElement.getBoundingClientRect();
            const overlayRect = this.overlay.getBoundingClientRect();
            const stringWidth = stringElementRect.width;
            const stringHeight = stringElementRect.height;
            const rightPosition = midPointX + stringWidth / 2;
            const bottomPosition = midPointY + stringHeight / 2;
            if (rightPosition > overlayRect.right) {
              stringElement.style.left = `${midPointX - stringWidth}px`;
            } else {
              stringElement.style.left = `${midPointX}px`;
            }
            if (bottomPosition > overlayRect.bottom) {
              stringElement.style.top = `${midPointY - stringHeight}px`;
            } else if (midPointY + stringHeight / 2 > overlayRect.bottom) {
              stringElement.style.top = `${midPointY - stringHeight}px`;
            } else {
              stringElement.style.top = `${midPointY - 2}px`;
            }
          }
        }
      }
      processQueue(queue);
    };
    processQueue([this.doc instanceof Document ? this.doc.documentElement : this.doc]);
  }
  monitorUserInput() {
    const inputQueue = [];
    let isTickPressed = false;
    this.keydownHandler = (e) => {
      var _a, _b;
      if (!this.overlay)
        return;
      e.stopPropagation();
      e.preventDefault();
      if (e.key === "Escape") {
        this.removeOverlay();
        return;
      }
      if (import_obsidian.Keymap.isModifier(e, "Mod") || import_obsidian.Keymap.isModifier(e, "Shift") || import_obsidian.Keymap.isModifier(e, "Alt")) {
        return;
      }
      if (e.key === "`") {
        isTickPressed = true;
        return;
      }
      if (!/^[qwertasdfgzxcvbQWERTASDFGZXCVB]$/i.test(e.key)) {
        if (e.key === "Backspace" || e.key === "Delete") {
          inputQueue.pop();
          isTickPressed = false;
          const inputDisplay2 = this.overlay.querySelector("#inputDisplay");
          if (inputDisplay2) {
            inputDisplay2.textContent = inputQueue.join("");
          }
          for (const [uniqueString, _] of this.elementsWithUniqueStrings.entries()) {
            const stringElement = document.getElementById(uniqueString);
            stringElement == null ? void 0 : stringElement.show();
          }
        }
        return;
      }
      const input = e.key.toUpperCase();
      if (inputQueue.length >= 2 && this.uniqueStrings.usedChars.has(inputQueue.join("")[0])) {
        inputQueue.shift();
      } else if (inputQueue.length >= 3) {
        inputQueue.shift();
      }
      inputQueue.push(input);
      const inputDisplay = this.overlay.querySelector("#inputDisplay");
      if (inputDisplay) {
        inputDisplay.textContent = inputQueue.join("");
      }
      const inputString = inputQueue.join("");
      for (const [uniqueString, _] of this.elementsWithUniqueStrings.entries()) {
        const stringElement = document.getElementById(uniqueString);
        if (stringElement && ((_a = stringElement.textContent) == null ? void 0 : _a.startsWith(inputString))) {
          stringElement.style.backgroundColor = "yellow";
          stringElement.style.color = "black";
        } else {
          stringElement == null ? void 0 : stringElement.hide();
        }
      }
      if (this.elementsWithUniqueStrings.has(inputString)) {
        let elementToClick = this.elementsWithUniqueStrings.get(inputString);
        if (elementToClick instanceof SVGSVGElement && elementToClick.parentElement) {
          elementToClick = elementToClick.parentElement;
        }
        this.removeOverlay();
        if (isTickPressed) {
          elementToClick == null ? void 0 : elementToClick.dispatchEvent(new MouseEvent("contextmenu", { bubbles: true, clientX: elementToClick.getBoundingClientRect().left + elementToClick.clientWidth / 2, clientY: elementToClick.getBoundingClientRect().top + elementToClick.clientHeight / 2 }));
        } else {
          elementToClick == null ? void 0 : elementToClick.dispatchEvent(new MouseEvent("click", { bubbles: true }));
          if (elementToClick instanceof HTMLInputElement) {
            if (document && document.activeElement !== elementToClick) {
              (_b = document.activeElement) == null ? void 0 : _b.blur();
            }
            setTimeout(() => {
              elementToClick == null ? void 0 : elementToClick.focus();
            }, 0);
          }
        }
        isTickPressed = false;
      }
    };
    window.addEventListener("keydown", this.keydownHandler, true);
  }
  init() {
    this.attachStringsToElements();
    this.monitorUserInput();
  }
  removeOverlay() {
    if (this.modal && !this.removed) {
      this.removed = true;
      this.cb();
      setTimeout(() => {
        this.modal.close();
      }, 0);
    }
    if (this.keydownHandler) {
      window.removeEventListener("keydown", this.keydownHandler, true);
      this.keydownHandler = null;
    }
  }
};

// surfingKeyIndex.ts
var SurfingKeyPlugin2 = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.documentMonitor = null;
    this.lastKeypressTime = 0;
    this.keyComboPressed = false;
  }
  async onload() {
    this.addCommand({
      id: "surfing-obsidian",
      name: "Surfing Obsidian",
      callback: () => {
        if (!this.documentMonitor) {
          this.documentMonitor = new ElementMonitor(activeDocument, () => {
            this.documentMonitor = null;
          }, this);
          this.documentMonitor.init();
        }
      }
    });
    this.registerDomEvent(window, "keydown", (event) => {
      let focusedElement = activeDocument;
      if (!activeDocument.querySelector(".modal-container")) {
        return;
      } else {
        focusedElement = activeDocument.querySelector(".modal-container");
      }
      if (import_obsidian2.Keymap.isModEvent(event) && event.key === "g") {
        const currentTime = new Date().getTime();
        if (currentTime - this.lastKeypressTime <= 1e3) {
          if (!this.keyComboPressed) {
            if (!this.documentMonitor) {
              this.documentMonitor = new ElementMonitor(focusedElement, () => {
                this.documentMonitor = null;
              }, this);
              this.documentMonitor.init();
            }
            this.keyComboPressed = true;
          }
        } else {
          this.keyComboPressed = false;
        }
        this.lastKeypressTime = currentTime;
        setTimeout(() => {
          this.keyComboPressed = false;
        }, 1e3);
      }
    });
  }
  onunload() {
    if (this.documentMonitor) {
      this.documentMonitor.removeOverlay();
    }
  }
};
var SurfingKeyModal = class extends import_obsidian2.Modal {
  constructor(app2, plugin, elementMonitor) {
    super(app2);
    this.app = app2;
    this.plugin = plugin;
    this.elementMonitor = elementMonitor;
  }
  onOpen() {
    this.containerEl.addEventListener("click", () => {
      this.close();
    });
  }
  onClose() {
    this.containerEl.empty();
    if (!this.elementMonitor.removed) {
      this.elementMonitor.removeOverlay();
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
