---
title: "Untitled"
format: html
---

The goal of this notebook is to derive the $Q$ matrix (aka. Infinetestimal generator Matrix) from data generated by a gillespie simulated CTMC model of a SIR disease process. 

To begin, lets define the disease model.

The SIR compartmental model features 3 compartiments (Susceptible, Infectious, and Recovered) though which N individuals pass between (i.e. $S + I + R = N$) over time. To impliment this, lets define a type to represent the state of an SIR system at time t, $X(t) = \{S, I, R\}$.

```{julia}
struct SIR_state
    S::Int
    I::Int
    R::Int
end
```

 In an SIR system there are two possible events: after a certain time $\Delta t$, infection (i.e. an individual moves from the Susceptible compartment to the Infectious compartment) $X(t + \Delta t) = \{s-1, i + 1, R\}$ and  recovery $X(t + \Delta t) = \{s, i-1, R +1\}$. Lets define these as triples which we can add to our SIR_State variable
 
```{julia}
SIR_events = (
    infection = [-1, 1, 0],
    recovery = [0,-1,1]
)
```
Which event will occur? Epidemiologcal theory tells us that, assuming homogenous mixing on Infectious and Susceptible individuals there will be $S \times I$ opportunities for contact. only a proportion of these opporunities will result in infection, so let the parameter $\beta$, the 'transmission rate' l modulate this. 


lets define a 'transition' function, which, given a state X(t) will return the probability of each event occurring

```{julia}
function Transition_Function(X, β, γ)
  (S,I,R) = X
  infection = β*S*I
  recovery = γ*I
  [infection,recovery]
end
```

Ok thats enough setting up, lets simulate the evolution of the system throrugh time.


To record the output, I'll create a dataframe for the state variables and the time

```{julia}
using DataFrames

SIR_CTMC = DataFrame(
    t = Vector{Float64}(),
    S = Vector{Int64}(),
    I = Vector{Int64}(),
    R = Vector{Int64}())
```

and set the initial conditions

```{julia}
X0 = [999,1,0]
t0 = 0

Xt = X0
t = t0
push!(SIR_CTMC, [t;Xt])
```
now for a time step. Delta t will have an exponential distribution with parameter 1/\sum{a+b}

```{julia}
using Distributions
β = 0.5
λ = 0.1
Δt = rand(Exponential(1/sum(Transition_Function(Xt,β, λ))))
t += Δt
```

Next we need to determine which event will happen. The probability of a transition will be given by the proportion of the 

```{julia}
Pt = Transition_Function(Xt,β, λ)
Pi = Transition_Function(Xt,β, λ)[1]/sum(Transition_Function(Xt,β, λ))
Pr = Transition_Function(Xt,β, λ)[2]/sum(Transition_Function(Xt,β, λ))
```


To sample one event with probability weighting according to its relative propensity,
```{julia}
t = rand() 
i = 1
cw = tf[1]
while cw < t && i < size(tf)
    i += 1
    @inbounds cw += tf[i]
end
Δx = SIR_events[i]

Xt += Δx

push!(SIR_CTMC, [t;Xt])
```





The probability that a susceptible individual will become infected $p_{s-1, i+1}\leftarrow{s, i} = \frac$



Since $R = S+I -N$, se can represent the state of the system with $\{S, I\}$, where $S \in \{0,1, ... , N-I-R\}$, $I \in \{0,1, ... , N-S-R\}$.

for example, when N = 3, we can represent the system with a graph:

As a discrete time process this Markov chain can be represented by the transition matrix 
$$
p = \begin{bmatrix}
\end{bmatrix}
$$


In continuous time, siple transition probabilities are not sufficient to describe the process. We need the Transition rates which are related to the trasition probabilities
$$p _ { i j } = \frac { q _ { i j } } { \sum _ { k } q _ { i k } } = \frac { q _ { i j } } { q _ { i } }$$
-----
Gillespie algorithm

1. Define event space (Susceptible -> infectious, Infectious -> Recovered) and the propensity function for each event 
    $p\_{inf} = \beta \times S \times I$
    $p\_{rec} = \gamma \times I$

2. Determine the time until the next event ($\tau$) by sampling from an exponential distribution with parameter $\frac{1}{\sum{p}}$

3. Determine which event occurs at time $t + \tau$ by weighting a random sample of $x\sim unif(0,1)$ according top each event's propensity and taking the large of the two. 

4. Update time and state to be t + \tau and ___ 